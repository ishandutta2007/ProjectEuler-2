#------------------------------------------- Triangular, pentagonal, and hexagonal ------------------------------------ #
#                                                                                                                       #
#       Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:                            #
#                                                                                                                       #
#       Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...                                            #
#       Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...                                           #
#       Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...                                           #
#                                                                                                                       #
#       It can be verified that T285 = P165 = H143 = 40755.                                                             #
#                                                                                                                       #
#       Find the next triangle number that is also pentagonal and hexagonal.                                            #
# --------------------------------------------------------------------------------------------------------------------- #
import time

def genTriangleNumbers(t):
    genTriangleNumbers.TRIANGLES = [0] * (t + 1)
    for i in range(t + 1):
        genTriangleNumbers.TRIANGLES[i] = i * (i + 1) // 2

    return genTriangleNumbers.TRIANGLES
genTriangleNumbers.TRIANGLES = []

def genPentagonalsNumbers(t):
    genPentagonalsNumbers.PENTAGONALS = [0] * (t + 1)
    for i in range(t + 1):
        genPentagonalsNumbers.PENTAGONALS[i] = i * (3 * i - 1) // 2

    return genPentagonalsNumbers.PENTAGONALS
genPentagonalsNumbers.PENTAGONALS = []

def genHexagonalNumbers(t):
    genHexagonalNumbers.HEXAGONALS = [0] * (t + 1)
    for i in range(t + 1):
        genHexagonalNumbers.HEXAGONALS[i] = i * (2 * i - 1)

    return genHexagonalNumbers.HEXAGONALS
genHexagonalNumbers.HEXAGONALS = []

def eu45():
    K = 100000
    
    #t = set(genTriangleNumbers(K)) # since all hexagonal numbers are also triangular, we can ignore those...
    p = set(genPentagonalsNumbers(K))
    h = set(genHexagonalNumbers(K))
            
    return p & h # t & p & h
            
if __name__ == "__main__":
    startTime = time.clock()
    print (eu45())
    elapsedTime = time.clock() - startTime
    print ("Time spent in (", __name__, ") is: ", elapsedTime, " sec")
